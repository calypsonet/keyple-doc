' Copyright (c) 2018 Calypso Networks Association https://www.calypsonet-asso.org/
'
' All rights reserved. This program and the accompanying materials are made available under the
' terms of the Eclipse Public License version 2.0 which accompanies this distribution, and is
' available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html

@startuml(id=TERMINAL_FULL)
package external.terminalapplication #3399FF {
  class SpecificTerminal
  
  class SpecificPluginObserver {
    +update(AbstractObservablePlugin plugin, AbstractPluginEvent event)
  }
  class SpecificReaderObserver {
    +update(AbstractObservableReader reader, ReaderEvent event)
  }
  
'  SpecificTerminal -right[hidden]--> SpecificPluginObserver
'  SpecificPluginObserver -right[hidden]--> SpecificReaderObserver
}
@enduml

@startuml(id=TERMINAL_LIGHT)
package external.terminalapplication #3399FF {
  class SpecificTerminal
}
@enduml

@startuml(id=SERVICE)
+class "<b>final</b> SeProxyService" as SeProxyService << Singleton >> {
  -int version
  List<ReadersPlugin> plugins()
  -SeProxyService()
  +{static}SeProxyService getInstance()
  +setPlugins(List<ReadersPlugin> plugins())
  +SortedSet<ReadersPlugin> getPlugins()
  +int getVersion()
}
@enduml

@startuml(id=PROXY_INTERFACE)
+interface ReadersPlugin {
  +SortedSet<? extends ProxyReader> getReaders()
}

+interface ProxyReader {
  +boolean isSePresent()
  +void addSeProtocolSetting(SeProtocolSetting seProtocolSetting);
  +SeResponseSet transmit(<b>final</b> SeRequestSet seApplicationRequest)
}
@enduml

@startuml(id=SE_REQUEST_SET)
+class "<b>final</b> SeRequestSet" as SeRequestSet {
  -<b>final</b> LinkedHashSet<SeRequest> orderedSetRequests
  +SeRequestSet(Set<SeRequest> seRequests)
  +SeRequestSet(SeRequest seRequest)
  +Set<SeRequest> getRequests()
  +SeRequest getSingleRequest()
}

+class "<b>final</b> SeResponseSet" as SeResponseSet {
  -<b>final</b> ArrayList<SeResponse> seResponses
  +SeResponseSet(List<SeResponse> seResponses)
  +SeResponseSet(SeResponse seResponse)
  +List<SeResponse> getResponses()
  +SeResponse getSingleResponse()
}
@enduml

@startuml(id=APDU_REQUEST)
+class "<b>final</b> ApduRequest" as ApduRequest {
  -boolean case4
  +ApduRequest(ByteBuffer bytes, boolean case4)
  +boolean isCase4()
}

+class "<b>final</b> ApduResponse" as ApduResponse {
  -boolean successful
  +ApduResponse(ByteBuffer bytes, boolean successful)
  +boolean isSuccessful()
}
@enduml

@startuml(id=APDU_PACKAGE)
package org.eclipse.keyple.seproxy #FFFFFF {
+class "<b>final</b> ApduRequest" as ApduRequest {
  -boolean case4
  +ApduRequest(ByteBuffer bytes, boolean case4)
  +boolean isCase4()
}

+class "<b>final</b> ApduResponse" as ApduResponse {
  -boolean successful
  +ApduResponse(ByteBuffer bytes, boolean successful)
  +boolean isSuccessful()
}

ApduRequest -right[hidden]- ApduResponse
}
@enduml

@startuml(id=APDU_STRUCTURE)
+class "<b>final</b> SeRequest" as SeRequest {
  -Selector[0..1] selector
  -ArrayList<ApduRequest> apduRequests
  -SeProtocol[0..1] protocolFlag
  -boolean keepChannelOpen
  +SeRequest(Selector[0..1] selector, List<ApduRequest> apduRequests,  boolean keepChannelOpen, SeProtocol[0..1] protocolFlag)
  +Selector getSelector()
  +List<ApduRequest> getApduRequests()
  +boolean isKeepChannelOpen()
  +SeProtocol getProtocolFlag()
}

+class "<b>final</b> SeResponse" as SeResponse {
  -boolean channelPreviouslyOpen
  -ApduResponse[0..1] atr
  -ApduResponse[0..1] fci
  -ArrayList<ApduResponse> apduResponses
  +SeResponse(boolean channelPreviouslyOpen, ApduResponse[0..1] atr, ApduResponse[0..1] fci, List<ApduResponse> apduResponses)  
  +boolean wasChannelPreviouslyOpen()
  +ApduResponse getAtr()
  +ApduResponse getFci()
  +List<ApduResponse> getApduResponses()
}

+abstract "<b>static</b> Selector" as Selector {
}
+class "<b>static final</b> AidSelector" as AidSelector {
  +AidSelector(ByteBuffer aidToSelect)
}
+class "<b>static final</b> AtrSelector" as AtrSelector {
  +AtrSelector(String atrRegex)
}

+interface SeProtocol {
	+String getName()
}

package protocol #FFFFFF {

+enum ContactlessProtocols {
	.. standard ..
	PROTOCOL_ISO14443_4
	.. proprietary ..
	PROTOCOL_ISO14443_3A
	PROTOCOL_ISO14443_3B
	PROTOCOL_B_PRIME
	PROTOCOL_MIFARE_UL
	PROTOCOL_MIFARE_CLASSIC
	PROTOCOL_MIFARE_DESFIRE
	PROTOCOL_MEMORY_ST25
}

+enum ContactsProtocols {
	.. standard ..
	PROTOCOL_ISO7816_3
}

+interface SeProtocolSettings {
  +SeProtocol getFlag();
  +String getValue();
}
}

'#abstract AbstractApduBuffer {
abstract AbstractApduBuffer {
  -<b>final</b> ByteBuffer bytes
  +AbstractApduBuffer()
  +ByteBuffer getBytes(ByteBuffer bytes)
}
@enduml

@startuml(id=NAMEABLE_CONFIGURABLE)

interface NameableConfigurable {
  +String getName()
  +Map<String, String> getParameters()
  +void setParameter(String key, String value)
  +void setParameters(Map<String, String> parameters)
}
@enduml

@startuml(id=COMPARABLE)

package java.util #FFFFFF {
interface Comparable<T> {
  +int compareTo(T o)
}
}
@enduml

@startuml(id=OBSERVABLE_PATTERN)

package org.eclipse.keyple.util <<Node>> #FFFFFF {
  +class Observable<T> {
    #<b>final</b> Collection<Observer<T> observers
    -boolean changed
    +Observable()
    +addObserver(<b>final</b> Observer<T> observer)
    +removeObserver(<b>final</b> Observer<T> observer)
    +clearObservers()
    +setChanged()
    +clearChanged()
    +boolean hasChanged()
    +int countObservers()
    +notifyObservers()
    +notifyObservers(<b>final</b> T event)
  }

  +interface Observer<T> {
    +update(T event)
  }

  Observable +-up- Observer
  
  Observer "1" o-down- "*" Observable : observes <
  (Observable, Observer) . T
}
@enduml


@startuml(id=OBSERVABLE_LOG)
  #abstract AbstractLoggedObservable<T> {
    -<b>final</b> String name
    #AbstractLoggedObservable(String name)
    +<b>final</b> String getName()
    +addObserver(<b>final</b> Observer<T> observer)
    +removeObserver(<b>final</b> Observer<T> observer)
    +<b>final</b> notifyObservers(<b>final</b> T value)
    +<b>final</b> setParameters(Map<String, String> parameters)
  }
  AbstractLoggedObservable -up-|> Observable : extends
  
'  together {
'    "org.eclipse.keyple.util"
'    AbstractLoggedObservable
'  }
@enduml

@startuml(id=EVENT_READER)

+class "<b>final</b> ReaderEvent" as ReaderEvent {
  -<b>final</b> String pluginName
  -<b>final</b> String readerName
  -<b>final</b> EventType eventType
  +ReaderEvent(String pluginName, String readerName, EventType eventType)
  +String getPluginName()
  +String getReaderName()
  +EventType getEventType()
}

+enum "EventType" as EventType_Reader {
  SE_INSERTED
  SE_REMOVED
  IO_ERROR
  -String name
  EventType(String name)
  +String getName()
}

EventType_Reader -down-+ ReaderEvent

+interface ObservableReader {  
  +void addObserver(ReaderObserver observer);
  +void removeObserver(ReaderObserver observer);
  +void notifyObservers(ReaderEvent event);
}

+interface ReaderObserver {
  +update(ReaderEvent event)
}
'interface ReaderObserver extends Observable.Observer<ReaderEvent>
@enduml

@startuml(id=EVENT_READER_RELATION)
ReaderObserver "1" o-down- "*" ObservableReader : observes <
'(ReaderObserver, ObservableReader) . ReaderEvent
ReaderEvent . (ReaderObserver, ObservableReader)

'together {
'  interface ReaderObserver
'  class ReaderEvent
'  enum EventType_Reader
'  interface ObservableReader
'}

'interface ReaderObserver extends Observable.Observer<ReaderEvent>
@enduml

@startuml(id=FACTORIZE_EVENT_READER)
+abstract AbstractObservableReader {
  +<b>final</b> void setSeProtocols(Map<SeProtocol, String> seProtocolSettings)
  +SeResponseSet transmit(<b>final</b> SeRequestSet seApplicationRequests)
  #{abstract} SeResponseSet processSeRequestSet(SeRequestSet requestSet)
  +<b>final</b> int compareTo(ProxyReader o)
}

interface "Observer<ReaderEvent>" as Observer_ReaderEvent
abstract "AbstractLoggedObservable<ReaderEvent>" as AbstractLoggedObservable_ReaderEvent

'AbstractLoggedObservable_ReaderEvent -up- AbstractLoggedObservable
AbstractLoggedObservable_ReaderEvent -left- AbstractLoggedObservable
AbstractObservableReader -up-|> AbstractLoggedObservable_ReaderEvent : extends

'Observer_ReaderEvent "1" o-down- "*" AbstractLoggedObservable_ReaderEvent : observes <
'(AbstractLoggedObservable_ReaderEvent, Observer_ReaderEvent) . ReaderEvent

@enduml

@startuml(id=FACTORIZE_LOCAL_READER)
+abstract AbstractLocalReader {
  #Map<SeProtocol, String> protocolsMap
  #AbstractLocalReader(String name)
  +<b>final</b> SeResponseSet transmit(<b>final</b> SeRequestSet seApplicationRequest)
  #{abstract} ByteBuffer[] openLogicalChannelAndSelect(ByteBuffer aid, Set<Short> successfulSelectionStatusCodes)
  #{abstract} closePhysicalChannel()
  #{abstract} ApduResponse transmitApdu(<b>final</b> ApduRequest apduRequest)
  #{abstract} boolean protocolFlagMatches(SeProtocol protocolFlag)
  #<b>final</b> ApduResponse processApduRequest(ApduRequest apduRequest)
  -ApduResponse case4HackGetResponse(int originalStatusCode)
  #<b>final</b> SeResponseSet processSeRequestSet
  #<b>final</b> boolean isLogicalChannelOpen()
  #<b>final</b> closeLogicalChannel()
  -SeResponse processSeRequest(SeRequest seRequest)
  +<b>final</b> addSeProtocolSetting(Map<SeProtocol, String> seProtocolSettings)
}

+abstract AbstractSelectionLocalReader {
  #AbstractSelectionLocalReader(String name)
  #{abstract} ByteBuffer getATR()
  #{abstract} boolean isPhysicalChannelOpen()
  #{abstract} openPhysicalChannel()
  #<b>final</b> ByteBuffer[] openLogicalChannelAndSelect(ByteBuffer aid, Set<Short> successfulSelectionStatusCodes)
}

+abstract AbstractThreadedLocalReader {
  -EventThread thread
  #AbstractThreadedLocalReader(String name)
  #<b>final</b> setThreadWaitTimeout(long timeout)
  +<b>final</b> addObserver(<b>final</b> ReaderObserver observer)
  +<b>final</b> removeObserver(<b>final</b> ReaderObserver observer)
  #{abstract} boolean waitForCardPresent(long timeout)
  #{abstract} boolean waitForCardAbsent(long timeout)
}

-class "EventThread" as EventThread_Reader {
  EventThread(AbstractObservableReader reader)
  end()
  -cardRemoved()
  -cardInserted()
  -exceptionThrown(Exception ex)
  +run()
}

@enduml


@startuml(id=EVENT_PLUGIN)

+class "<b>final</b> PluginEvent" as PluginEvent {
  -<b>final</b> String pluginName
  -<b>final</b> String readerName
  -<b>final</b> EventType eventType
  +PluginEvent(String pluginName, String readerName, EventType eventType)
  +String getPluginName()
  +String getReaderName()
  +EventType getEventType()
}

+enum "EventType" as EventType_Plugin {
  READER_CONNECTED
  READER_DISCONNECTED
  -String name
  EventType(String name)
  +String getName()
}

EventType_Plugin -down-+ PluginEvent

+interface ObservablePlugin {  
  +void addObserver(PluginObserver observer);
  +void removeObserver(PluginObserver observer);
  +void notifyObservers(PluginEvent event);
}

+interface PluginObserver {
  +update(PluginEvent event)
}
@enduml

@startuml(id=EVENT_PLUGIN_RELATION)
PluginObserver "1" o-down- "*" ObservablePlugin : observes <
PluginEvent . (ObservablePlugin, PluginObserver)

'together {
'  interface PluginObserver
'  class PluginEvent
'  enum EventType_Plugin
'  interface ObservablePlugin
'}
@enduml

@startuml(id=FACTORIZE_PLUGIN)

abstract AbstractObservablePlugin {
  #SortedSet<AbstractObservableReader> readers
  #AbstractObservablePlugin(name)
  +<b>final</b> SortedSet<AbstractObservableReader> getReaders()
  #{abstract} SortedSet<AbstractObservableReader> getNativeReaders()
  #{abstract} AbstractObservableReader getNativeReader(String name)
  +<b>final</b> int compareTo(ReadersPlugin o)
}

+abstract AbstractThreadedObservablePlugin {
  -{static}<b>final</b> long SETTING_THREAD_TIMEOUT_DEFAULT
  -long threadWaitTimeout
  -EventThread thread
  #{static} SortedSet<String> nativeReadersames
  #AbstractThreadedObservablePlugin(String name)
  #{abstract} SortedSet<String> getNativeReadersNames()
  +<b>final</b> addObserver(<b>final</b> PluginObserver observer)
  +<b>final</b> removeObserver(<b>final</b> PluginObserver observer)
  -exceptionThrown(Exception ex)
}

-class "EventThread" as EventThread_Plugin {
  EventThread()
  end()
  +run()
}

#class AbstractEventThread {
  EventThread()
  +run()
}

+abstract AbstractStaticPlugin {
  +<b>final</b> addObserver(<b>final</b> PluginObserver observer)
  +<b>final</b> removeObserver(<b>final</b> PluginObserver observer)
}

abstract "AbstractLoggedObservable<PluginEvent>" as AbstractLoggedObservable_PluginEvent
interface "Observer<PluginEvent>" as Observer_PluginEvent

'AbstractLoggedObservable_PluginEvent -up- AbstractLoggedObservable
AbstractLoggedObservable_PluginEvent -right- AbstractLoggedObservable
AbstractObservablePlugin -up-|> AbstractLoggedObservable_PluginEvent : extends

'Observer_PluginEvent "1" o-down- "*" AbstractLoggedObservable_PluginEvent : observes <
'PluginEvent . (AbstractLoggedObservable_PluginEvent, Observer_PluginEvent)
@enduml

@startuml(id=EXTERNAL_PLUGIN)
package external.sepluginlibrary #FFCCFF {
+class "<b>final</b> NativePlugin" as NativePlugin << Singleton >> {
  -String name
  -NativePlugin()
  +{static} NativePlugin getInstance()
  +<b>final</b> String getName()
  +<b>final</b> List<NativeReader> getReaders()
}
+class "<b>final</b> NativeReader" as NativeReader << Singleton >> {
  -String name
  #NativeReader()
  +<b>final</b> String getName()
}
NativePlugin "1" *-right-> "*" NativeReader : readers
}
@enduml

@startuml(id=INTERNAL_PLUGIN)
package plugin.remotese #FFCCFF {
+class "<b>final</b> RemoteSePlugin" as RemoteSePlugin << Singleton >> {
  -String name
  -RemoteSePlugin()
  +{static} RemoteSePlugin getInstance()
  +<b>final</b> String getName()
  +<b>final</b> List<RemoteSeReader> getReaders()
}
+class "<b>final</b> RemoteSeReader" as RemoteSeReader << Singleton >> {
  -String name
  #RemoteSeReader()
  +<b>final</b> String getName()
}
RemoteSePlugin "1" *-right-> "*" RemoteSeReader : readers
}

package plugin.androidnfc #FFCCFF {
+class "<b>final</b> AndroidNfcPlugin" as AndroidNfcPlugin << Singleton >> {
  -String name
  -AndroidNfcPlugin()
  +{static} AndroidNfcPlugin getInstance()
  +<b>final</b> String getName()
  +<b>final</b> List<AndroidNfcReader> getReaders()
}
+class "<b>final</b> AndroidNfcReader" as AndroidNfcReader << Singleton >> {
  #AndroidNfcReader()
}
AndroidNfcPlugin "1" *-right-> "*" AndroidNfcReader : readers
}

package org.eclipse.keyple.plugin.android.omapi #FFCCFF {
+class "<b>final</b> AndroidOmapiPlugin " as AndroidOmapiPlugin  << Singleton >> {
  -AndroidOmapiPlugin ()
  +{static} AndroidOmapiPlugin getInstance()
}
+class "<b>final</b> AndroidOmapiReader" as AndroidOmapiReader << Singleton >> {
  #AndroidNfcReader()
}
AndroidOmapiPlugin "1" *-right-> "*" AndroidOmapiReader : readers
}

package plugin.pcsc #FFCCFF {

+class "<b>final</b> PcscPlugin" as PcscPlugin << Singleton >> {
  -String name
  -PcscPlugin()
  +{static} PcscPlugin getInstance()
  +<b>final</b> String getName()
  +<b>final</b> List<PcscReader> getReaders()
}
+class "<b>final</b> PcscReader" as PcscReader << Singleton >> {
  -String name
  #PcscReader()
  +<b>final</b> String getName()
}
PcscPlugin "1" *-right-> "*" PcscReader : readers
}


@enduml
